1. Creating Dataframes
sales_data = [
(1,1,'manish','2023-01-16','gurgaon','india',380),
(77,1,'manish','2023-03-11','bangalore','india',300),
(12,3,'nikita','2023-09-20','delhi','india',127),
(54,4,'rakesh','2023-08-10','jaipur','india',321),
(65,5,'ayush','2023-09-07','mosco','russia',765),
(89,6,'rajat','2023-08-10','jaipur','india',321)
]
sales_schema = ['sales_id', 'customer_id','customer_name', 'sales_date', 'food_delivery_address','food_delivery_country', 'food_cost']
sales_df = spark.createDataFrame(data=sales_data,schema=sales_schema)
customer_dim_data = [
(1,'manish','arwal','india','N','2022-09-15','2022-09-25'),
(2,'vikash','patna','india','Y','2023-08-12',None),
(3,'nikita','delhi','india','Y','2023-09-10',None),
(4,'rakesh','jaipur','india','Y','2023-06-10',None),
(5,'ayush','NY','USA','Y','2023-06-10',None),
(1,'manish','gurgaon','india','Y','2022-09-25',None),
]
customer_schema= ['id','name','city','country','active','effective_start_date','effective_end_date']

customer_dim_df = spark.createDataFrame(data= customer_dim_data,schema=customer_schema)

2. Joining both the tables and filtering records that are not active in dimension table.

merge_df = customer_dim_df.filter(col('active')=='Y').join(sales_df, customer_dim_df['id']==sales_df['customer_id'],'left')

3. Capturing only those records whose location has changed and setting their status as active.

res_df=merge_df.filter(col('city')!=col('food_delivery_address'))\
    .withColumn('city',col('food_delivery_address'))\
        .withColumn('country',col('food_delivery_country'))\
            .withColumn('effective_start_date',col('sales_date'))\
                .withColumn('effective_end_date',lit('null'))\
                .select('id','name','city','country','active','effective_start_date','effective_end_date')
				
4. Capturing only those records whose location has changed but old location needs to be inactive now.

inactive_df=merge_df.filter(col('city')!=col('food_delivery_address'))\
    .withColumn('active',lit('N'))\
        .withColumn('country',col('food_delivery_country'))\
            .withColumn('effective_end_date',col('sales_date'))\
                .select('id','name','city','country','active','effective_start_date','effective_end_date')
				
5. Capturing if any new record in Sales table who is not a customer yet.

df=sales_df.join(customer_dim_df,sales_df['customer_id']==customer_dim_df['id'],'left_anti')

df=df.withColumn('effective_end_date',lit('null'))\
    .withColumn('active',lit('Y'))\
    .withColumn('effective_start_date',col('sales_date'))\
    .withColumn('id',col('customer_id'))\
    .withColumn('name',col('customer_name'))\
    .select('id','name','food_delivery_address','food_delivery_country','active','effective_start_date','effective_end_date')
	
6. Taking unionAll of step - 3,4,5 and dimension table because all customers should be there in result and filtering out duplicate active records for a single customer using Window functions.

f_df = (customer_dim_df.unionAll(df).unionAll(res_df).unionAll(inactive_df))
window = Window.partitionBy(col('id')).orderBy(col('effective_start_date').desc())
f_df.withColumn('dr',dense_rank().over(window))\
    .filter(~((col('active')=='Y') & (col('dr')>=2))).drop("dr").orderBy('effective_start_date').show()
 
